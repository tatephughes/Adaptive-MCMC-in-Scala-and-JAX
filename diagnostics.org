#+TITLE: diagnostics in R

The package ~coda~ has some tools for MCMC diagnosing;
#+begin_src R :session example :results none
library(coda)
#+end_src

We perform some diagnostics in R.

#+begin_src R :session example :results output :exports both
# Read the data in

# compute_time_<prog>_<type>_<label>_<i>, sample_<prog>_<type>_<label>_<i>, bvals_<prog>_<type>_<label>_<i>
for (label in c("scala", "r", "jax")){
  for (type in c("IC", "MD")){
    for (i in (1:5)){
      source(paste("./data/", label, "_sample_", type, "_pc_", i, sep=''))
    }
  }
}

# these should all come from the settings
thinrate <- 100
n <- 10000
burnin <- 0
d <- 100
#+end_src

#+RESULTS:
#+begin_example
Error in source("./data/r_sample_IC_pc_1") : 
  ./data/r_sample_IC_pc_1:13:39: unexpected '{'
12: 
13: output_results <- function(){ chain_r_{
                                          ^
Error in source("./data/r_sample_MD_pc_1") : 
  ./data/r_sample_MD_pc_1:13:39: unexpected '{'
12: 
13: output_results <- function(){ chain_r_{
                                          ^
#+end_example

#+begin_src R :session example :results output :exports both
r_IC_chain <- mcmc(sample_r_IC, thin=thinrate, start=0)
r_MD_chain <- mcmc(sample_r_MD, thin=thinrate, start=0)
scala_IC_chain <- mcmc(sample_scala_IC, thin=thinrate, start=0)
scala_MD_chain <- mcmc(sample_scala_MD, thin=thinrate, start=0)
jax_IC_chain <- mcmc(sample_jax_32_IC, thin=thinrate, start=0)
jax_MD_chain <- mcmc(sample_jax_32_MD, thin=thinrate, start=0)

print(paste("The R (IC) minimum effective sample size is", min(effectiveSize(r_IC_chain))))
print(paste("The R (MD) minimum effective sample size is", min(effectiveSize(r_MD_chain))))
print(paste("The Scala (IC) minimum effective sample size is", min(effectiveSize(scala_IC_chain))))
print(paste("The Scala (MD) minimum effective sample size is", min(effectiveSize(scala_MD_chain))))
print(paste("The JAX (IC) minimum effective sample size is", min(effectiveSize(jax_IC_chain))))
print(paste("The JAX (MD) minimum effective sample size is", min(effectiveSize(jax_MD_chain))))
#+end_src

#+RESULTS:
: [1] "The R (IC) minimum effective sample size is 750.69258520315"
: [1] "The R (MD) minimum effective sample size is 1182.43366027473"
: [1] "The Scala (IC) minimum effective sample size is 621.826737847852"
: [1] "The Scala (MD) minimum effective sample size is 1167.50446121078"
: [1] "The JAX (IC) minimum effective sample size is 622.864901785441"
: [1] "The JAX (MD) minimum effective sample size is 1271.31786979535"

#+begin_src R :session example :results graphics file :file ./Figures/plot_mixing_full.png :height 600 :width 1200 :exports both
library(ggplot2)
library(dplyr)
library(tidyr)
library(patchwork)

b_vals_data <- data.frame(thinrate*(1:n), bvals_scala_IC, bvals_scala_MD,
                          bvals_jax_32_IC, bvals_jax_32_MD,
                          bvals_r_IC, bvals_r_MD)[-1,] # remove the first data point cause R is funny
names(b_vals_data) <- c("j", "SCALA_IC", "SCALA_MD",
                        "JAX32_IC", "JAX32_MD",
                        "R_IC", "R_MD")
b_vals_long <- b_vals_data %>% pivot_longer(c(SCALA_IC, SCALA_MD,
                                              JAX32_IC, JAX32_MD,
                                              R_IC, R_MD))
names(b_vals_long) <- c("j", "proc", "b")

plot_mixing <- ggplot(b_vals_long, aes(x = j, y = b, color = proc)) +
  geom_line(size = 0.5) +
  scale_color_manual(values = c("SCALA_IC" = "blue", "SCALA_MD" = "lightblue",
                                "JAX32_IC" = "pink", "JAX32_MD" = "red",
                                "R_IC" = "green", "R_MD" = "darkgreen"
                                )) +
  theme_minimal() + 
  labs(title = "Mixing Factor (Intel core i7 12700H, 16Gb RAM, Arch Linux)") +
  theme(text = element_text(size = 20))
print(plot_mixing)
#+end_src

#+RESULTS:
[[file:./Figures/plot_mixing_full.png]]


Why do we not get two separate lines for MD and IC?

I should repeat everything with different PRNG and take averages to smooth things out, 

Zooming in on the last segment,

#+begin_src R :session example :results graphics file :file ./Figures/plot_mixing_zoomed.png :height 600 :width 1200 :exports both
b_vals_data <- data.frame(thinrate*(1:n), bvals_scala_IC, bvals_scala_MD,
                          bvals_jax_32_IC, bvals_jax_32_MD,
                          bvals_r_IC, bvals_r_MD) %>% slice(-(1:5000)) # remove the first data point cause R is funny
names(b_vals_data) <- c("j", "SCALA_IC", "SCALA_MD",
                        "JAX32_IC", "JAX32_MD",
                        "R_IC", "R_MD")
b_vals_long <- b_vals_data %>% pivot_longer(c(SCALA_IC, SCALA_MD,
                                              JAX32_IC, JAX32_MD,
                                              R_IC, R_MD))
names(b_vals_long) <- c("j", "proc", "b")

plot_mixing <- ggplot(b_vals_long, aes(x = j, y = b, color = proc)) +
  geom_line(size = 2) +
  scale_color_manual(values = c("SCALA_IC" = "blue", "SCALA_MD" = "lightblue",
                                "JAX32_IC" = "pink", "JAX32_MD" = "red",
                                "R_IC" = "green", "R_MD" = "darkgreen"
                                )) +
  theme_minimal() + 
  labs(title = "Mixing Factor (Intel core i7 12700H, 16Gb RAM, Arch Linux)") +
  theme(text = element_text(size = 20))
print(plot_mixing)
#+end_src

#+RESULTS:
[[file:./Figures/plot_mixing_zoomed.png]]

We can see a very clear distinction between the MC group and the IC group, and very little difference in the performance of the languages, as we might hope!

We can also plot the traces of these easily now!

#+begin_src R :session example :results none
df_SCALA_IC <- as.data.frame(sample_scala_IC)
df_SCALA_MD <- as.data.frame(sample_scala_MD)
df_JAX_IC   <- as.data.frame(sample_jax_32_IC)
df_JAX_MD   <- as.data.frame(sample_jax_32_MD)
df_R_IC     <- as.data.frame(sample_r_IC)
df_R_MD     <- as.data.frame(sample_r_MD)

df_SCALA_IC$chain <- "Scala (IC)"
df_SCALA_MD$chain <- "Scala (MD)"
df_JAX_IC$chain   <- "JAX (IC)"
df_JAX_MD$chain   <- "JAX (MD)"
df_R_IC$chain     <- "R (IC)"
df_R_MD$chain     <- "R (MD)"

df_chains <- bind_rows(df_SCALA_IC,df_SCALA_MD,df_JAX_IC,df_JAX_MD,df_R_IC,df_R_MD)
df_chains <- cbind(thinrate*(1:n), df_chains)
names(df_chains) <- c("j", paste("x",1:100, sep=""), "chain")
#+end_src


#+begin_src R :session example :results graphics file :file ./Figures/trace_plots.png :height 600 :width 1200 :exports both
library(forcats) # for fct_relevel
trace_plots <- ggplot(df_chains) +
  geom_line(aes(x = j, y = x1, col=chain), size=0.2) +
  facet_wrap(~fct_relevel(chain, 'Scala (IC)', "JAX (IC)", "R (IC)", "Scala (MD)", "JAX (MD)", "R (MD)")) +
  scale_color_manual(values = c("Scala (IC)" = "darkblue", "Scala (MD)" = "darkblue",
                                "JAX (IC)" = "darkred", "JAX (MD)" = "darkred",
                                "R (IC)" = "darkgreen", "R (MD)" = "darkgreen"
                                )) +
  theme_minimal() +
  theme(text = element_text(size = 20))
print(trace_plots)
#+end_src

#+RESULTS:
[[file:./Figures/trace_plots.png]]

